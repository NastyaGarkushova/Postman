<<<<<<< HEAD:hw_2/postman_environment.txt
#HW_2 Postman
=======
HW_2 Postman.
>>>>>>> 894b833ea2285be9e750cf36808c8a8f3bf5152f:hw_2/postman_environment.json

`http://162.55.220.72:5005/first`

1. Отправить запрос.

2. Статус код 200.

`pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});`

3. Проверить, что в body приходит правильный string.

`pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});`





`http://162.55.220.72:5005/user_info_3`

1. Отправить запрос.

2. Статус код 200.

`pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});`

3. Спарсить response body в json.
`var jsonData = pm.response.json();`

4. Проверить, что name в ответе равно name в request (name вбить руками.)
`pm.test("name=Anna", function () {
    pm.expect(jsonData.name).to.eql("Anna");
});`

5. Проверить, что age в ответе равно age в request (age вбить руками.)
`pm.test("age = 30", function () {
    pm.expect(jsonData.age).to.eql("30");
});`

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
`pm.test("salary=80", function () {
    pm.expect(jsonData.salary).to.eql(80);
});`

7. Спарсить request.
`var req = request.data`
// создадим переменную salaryInt и присвоим ей преобразованное в int значение req.salary 
`var salaryInt = + (req.salary)`

8. Проверить, что name в ответе равно name в request (name забрать из request.)
`pm.test("Response name == Request name", function () {
    pm.expect(pm.response.name).to.eql(pm.request.name);
});`

9. Проверить, что age в ответе равно age s request (age забрать из request.)
`pm.test("Response age == Request age", function () {
    pm.expect(pm.response.age).to.eql(pm.request.age);
});`

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
`pm.test("Response salary == Request salary", function () {
    pm.expect(pm.response.salary).to.eql(pm.request.salary);
});`

11. Вывести в консоль параметр family из response.
`console.log (pm.response.json().family.children)`

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
`salaryInt = salaryInt*4;`
`pm.test("Response u_salary_1_5_year == Request salary * 4", function () {
    pm.expect(pm.response.u_salary_1_5_year).to.eql(pm.request.u_salary_1_5_year);
});`



`http://162.55.220.72:5005/object_info_3`

1. Отправить запрос.

2. Статус код 200

`pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});`

3. Спарсить response body в json.
`var jsonData = pm.response.json();`

4. Спарсить request.
`var req = pm.request.url.query.toObject();`
// создадим переменную salaryInt и присвоим ей преобразованное в int значение req.salary 
`var salaryInt = + (req.salary)`

5. Проверить, что name в ответе равно name в request (name забрать из request.)
`pm.test("Response name == Request name", function () {
    pm.expect(pm.response.name).to.eql(pm.request.name);
});`

`pm.test("Response age == Request age" , function () {
    pm.expect(pm.response.age).to.eql(pm.request.age)
});`

7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)
`pm.test("Response salary == Request salary" , function () {
    pm.expect(pm.response.salary).to.eql(pm.request.salary)
});`

8. Вывести в консоль параметр family из response.
`console.log (pm.response.json().family.children)`

9. Проверить, что у параметра dog есть параметры name.
`pm.test("Dog has a name", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("name");
});`

10. Проверить, что у параметра dog есть параметры age.
`pm.test("Dog has  age", function () {
    pm.expect(jsonData.family.pets.dog).to.have.property("age");
});`

11. Проверить, что параметр name имеет значение Luky.
`pm.test("Dog name = Luky", function () {
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});`

12. Проверить, что параметр age имеет значение 4.
`pm.test("Dog age = 4", function () {
    pm.expect(jsonData.family.pets.dog.age).to.eql(4);
});`







`http://162.55.220.72:5005/object_info_4`

1. Отправить запрос.

2. Статус код 200

`pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});`

3. Спарсить response body в json.
`var jsonData = pm.response.json();`

4. Спарсить request.
`var req = pm.request.url.query.toObject();`
// создадим переменную salaryInt и присвоим ей преобразованное в int значение req.salary 
`var salaryInt = + (req.salary);`

5. Проверить, что name в ответе равно name из request (name забрать из request.)
`pm.test("Response name == Request name", function () {
    pm.expect(pm.response.name).to.eql(pm.request.name);
});`

6. Проверить, что age в ответе равно age из request (age забрать из request.)
`pm.test("Response age == Request age", function () {
    pm.expect(pm.response.age).to.eql(pm.request.age);
});`

7. Вывести в консоль параметр salary из request.
`console.log("Request salary ===> ", req.salary);`

8. Вывести в консоль параметр salary из response
`console.log("Rеsponse salary ===> ", jsonData.salary);`

9. Вывести в консоль 0-й элемент параметра salary из response.
`console.log("Вывод из списка salary, элемента 0 ===> ", jsonData.salary[0]);`

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
`console.log("Вывод из списка salary, элемента 1 ===> ", jsonData.salary[1]);`

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
`console.log("Вывод из списка salary, элемента 1 ===> ", jsonData.salary[2]);`

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
`salaryInt = Number(req.salary);`
`pm.test("Response salary [0] = Request salary", function () {
    pm.expect(jsonData.salary[0]).to.eql(salaryInt);
});`

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
`pm.test("Response salary [1] = Request salary", function () {
    pm.expect(jsonData.salary[1]).to.eql+(salaryInt*2);
});`

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
`pm.test("Response salary [2] = Request salary", function () {
    pm.expect(jsonData.salary[2]).to.eql+(salaryInt*3);
});`

15. Создать в окружении переменную name

16.Создать в окружении переменную age

17.Создать в окружении переменную salary

18. Передать в окружение переменную name
`pm.environment.set("name", jsonData.name);`

19. Передать в окружение переменную age
`pm.environment.set("age", jsonData.age);`

20. Передать в окружение переменную salary
`pm.environment.set("salary", jsonData.salary [0]);`

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
`for (let i = 0; jsonData.salary.length > i; i++) {
    console.log(jsonData.salary[i]);
}`






`http://162.55.220.72:5005/user_info_2`

1. Вставить параметр salary из окружения в request

2. Вставить параметр age из окружения в age

3. Вставить параметр name из окружения в name

4. Отправить запрос.

5. Статус код 200

`pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});`

6. Спарсить response body в json.
`var jsonData = pm.response.json();`

7. Спарсить request.
`var reqData = request.data`

8. Проверить, что json response имеет параметр start_qa_salary
`pm.test("json response has start_qa_salary", function () {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});`

9. Проверить, что json response имеет параметр qa_salary_after_6_months
`pm.test("json response has qa_salary_after_6_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});`

10. Проверить, что json response имеет параметр qa_salary_after_12_months
`pm.test("json response has qa_salary_after_12_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
})`

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
`pm.test("json response has qa_salary_after_1.5_year", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});`

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
`pm.test("json response has qa_salary_after_3.5_years", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});`

13. Проверить, что json response имеет параметр person
`pm.test("json response has person", function () {
    pm.expect(jsonData).to.have.property("person");
});`

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
`pm.test("response start_qa_salary = request start_qa_salary", function () {
    pm.expect(jsonData.start_qa_salary).to.eql+("req.salary");
});`

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
`pm.test("response qa_salary_after_6_months = request qa_salary_after_6_months", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql+("req.salary*2");
});`

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
`pm.test("response qa_salary_after_12_months = request qa_salary_after_12_months", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql+("req.salary*2.7");
});`

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
`pm.test("response qa_salary_after_1.5_years = request qa_salary_after_1.5_year", function () {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql+("req.salary*3.3");
});` 

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
`pm.test("response qa_salary_after_3.5_years = request qa_salary_after_3.5_year", function () {
    pm.expect(jsonData["qa_salary_after_3.5_year"]).to.eql+("req.salary*3.8");
});`

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
`pm.test("В response параметре person, 1-й элемент из u_name равен salary из request", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql+(req.salary);
});`

20. Проверить, что  параметр u_age равен age из request (age забрать из request.)
`pm.test("response u_age= request age", function () {
    pm.expect(jsonData.person.u_age).to.eql+(req.age);
});`

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
`pm.test("response u_salary_5_years = request u_salary_5_years", function () {
    pm.expect(jsonData.u_salary_5_years).to.eql+(req.salary*4.2);
});`

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
`for (let i = 0; jsonData.person.u_name.length > i; i++) {
    console.log(jsonData.person.u_name[i]);
}`

